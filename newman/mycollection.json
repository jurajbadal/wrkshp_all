{
	"info": {
		"_postman_id": "fb49c1c0-51c4-42be-bd02-91de83086d83",
		"name": "JSON on Render",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17761809"
	},
	"item": [
		{
			"name": "GET ON START",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.quantity).to.be.a('number').and.to.satisfy((quantity) => quantity >= 0, \"Quantity must be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes/",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST ON 101",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with id, name, price, description, img, and quantity properties\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'name', 'price', 'description', 'img', 'quantity');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"id\": 101,\r\n    \"name\": \"Choco \",\r\n    \"price\": 2,\r\n    \"description\": \"Choco Sundae Cup (100 ml)\",\r\n    \"img\": \"https://www.havmor.com/sites/default/files/styles/502x375/public/gallery/Choco%20Sundae__0.webp?itok=Md5Ameuw\",\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT ON 101",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - name, price, img, quantity, and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.price).to.exist;\r",
							"    pm.expect(responseData.img).to.exist;\r",
							"    pm.expect(responseData.quantity).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Image URL is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.img).to.match(/^https?:\\/\\//, \"Image URL should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.be.at.least(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"id\": 101,\r\n    \"name\": \"Choco \",\r\n    \"price\": 2,\r\n    \"description\": \"Choco Sundae Cup (100 ml)\",\r\n    \"img\": \"https://www.havmor.com/sites/default/files/styles/502x375/public/gallery/Choco%20Sundae__0.webp?itok=Md5Ameuw\",\r\n    \"quantity\": 2\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes/101",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes",
						"101"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH ON 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - name, price, img, quantity, and id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.price).to.exist;\r",
							"    pm.expect(responseData.img).to.exist;\r",
							"    pm.expect(responseData.quantity).to.exist;\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Image URL is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.img).to.match(/^https?:\\/\\//, \"Image URL should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.be.at.least(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n    \"quantity\": 41\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes/100",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE ON 101",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the appropriate Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is an empty object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object').and.to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify dessert with ID 1001 is deleted from the system\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in valid JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes/101",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes",
						"101"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ON ALL END",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Each item in the array has the required properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('price');\r",
							"        pm.expect(item).to.have.property('description');\r",
							"        pm.expect(item).to.have.property('img');\r",
							"        pm.expect(item).to.have.property('quantity');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sumans-academy.onrender.com/cakes",
					"protocol": "https",
					"host": [
						"sumans-academy",
						"onrender",
						"com"
					],
					"path": [
						"cakes"
					]
				}
			},
			"response": []
		}
	]
}